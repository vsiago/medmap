generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// O modelo Tenant agora representa o "TenantOperator"
model Tenant {
  id                  String  @id @default(uuid())
  name                String // Nome do Tenant/Operadora
  slug                String  @unique // Slug para a URL dinâmica (ex: oplan)
  logoUrl             String? // Logo do Tenant/Operadora
  color               String? // Cor principal do Tenant/Operadora
  cnpj                String  @unique // CNPJ do Tenant/Operadora (agora único no Tenant)
  address             String? // Endereço completo do Tenant/Operadora
  addressComplement   String? // Complemento do endereço
  neighborhood        String? // Bairro
  city                String? // Cidade
  state               String? // Estado
  zipCode             String? // CEP
  phone               String? // Telefone
  isPremiumSubscriber Boolean @default(false) // NOVO CAMPO: Assinante Premium
  isPaused            Boolean @default(false) // NOVO CAMPO: Tenant Pausado

  users       User[] // Usuários vinculados a este Tenant
  networks    Network[] // Redes credenciadas vinculadas a este Tenant/Operadora
  comparisons Comparison[] // Comparações vinculadas a este Tenant

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(ANALYST)
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

enum UserRole {
  ADMIN
  MANAGER
  ANALYST
  VIEWER
  ROOT
}

model Network {
  id               String       @id @default(uuid())
  tenantId         String // Agora Network se relaciona diretamente com Tenant
  tenant           Tenant       @relation(fields: [tenantId], references: [id])
  name             String
  description      String?
  version          String?
  units            Unit[]
  redeAComparisons Comparison[] @relation("RedeA")
  redeBComparisons Comparison[] @relation("RedeB")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([tenantId])
}

model Unit {
  id                String     @id @default(uuid())
  networkId         String
  network           Network    @relation(fields: [networkId], references: [id])
  name              String
  externalId        String?
  type              UnitType
  specialtyTags     String[]
  city              String
  state             String
  latitude          Float?
  longitude         Float?
  address           String?
  addressComplement String?
  neighborhood      String?
  zipCode           String?
  phone             String?
  website           String?
  openingHours      String?
  certifications    String[]
  beds              Int?
  equipments        String[]
  status            UnitStatus @default(CREDENCIADO)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@index([networkId])
  @@index([city])
  @@index([state])
  @@index([state, city])
  @@index([type])
  @@index([latitude, longitude])
}

enum UnitType {
  HOSPITAL
  AMBULATORIO
  IMAGEM
  LABORATORIO
  OUTROS
}

enum UnitStatus {
  CREDENCIADO
  DESCREDENCIADO
  POTENCIAL
}

model Comparison {
  id         String   @id @default(uuid())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  name       String
  redeAId    String
  redeA      Network  @relation("RedeA", fields: [redeAId], references: [id])
  redeBId    String
  redeB      Network  @relation("RedeB", fields: [redeBId], references: [id])
  analysis   Json
  comparedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([tenantId])
  @@index([redeAId])
  @@index([redeBId])
}
